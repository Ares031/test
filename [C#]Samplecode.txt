namespace InsuranceWeb.Models
{
	public class JsonReturn
	{
		public bool IsSuccess { get; set; }

		public string Msg { get; set; }
	}

	public class JsonReturn<T> : JsonReturn
	{
		public T Data { get; set; }
	}
}

//--asp.net mvc中在Filter中轉跳不要使用Response.Redirect
https://blog.csdn.net/leewhoee/article/details/5963609
public class AnchorFilter : ActionFilterAttribute  
    {  
        public override void OnActionExecuting(ActionExecutingContext filterContext)  
        {  
		var qryString = filterContext.HttpContext.Request.Url.Query;
		Uri url = new Uri(finalUrl, UriKind.RelativeOrAbsolute);
                filterContext.Result = new RedirectResult(url.OriginalString + qryString);
                base.OnActionExecuting(filterContext);
		//-------
                if (!string.IsNullOrEmpty(filterContext.HttpContext.Request.QueryString["r_Anchor"]))  
                {  
                    filterContext.Result = new RedirectResult(string.Format("{0}#{1}",  
                                                                              filterContext.HttpContext.Request.Url.  
                                                                                  AbsolutePath,  
                                                                              filterContext.HttpContext.Request.  
                                                                                  QueryString["r_Anchor"]));  
                }
                base.OnActionExecuting(filterContext);  
        }  
    }  

//進程運行錯誤  收集器
https://hk.saowen.com/a/3d1ec4c0b1d1bff79ceb65a4735327fc2557ff118a32e8ac5bb7ed327dc153da
https://hk.saowen.com/a/9f1b85c9d4cead0bf833ae48f3a20c2ad78157f6f2a83d70236bab85e4a3a8cc
/// <summary>
    /// 進程運行錯誤  收集器
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
    public class LogExceptionAttribute : HandleErrorAttribute
    {
        public override void OnException(ExceptionContext filterContext)
        {
            if (!filterContext.ExceptionHandled)
            {
                try
                {
                    string sForm = this.GetCollections(filterContext.HttpContext.Request.Form);
                    string sQuery = this.GetCollections(filterContext.HttpContext.Request.QueryString);
                    string ControllerName = string.Format("{0}Controller", filterContext.RouteData.Values["controller"] as string);
                    string ActionName = filterContext.RouteData.Values["action"] as string;
                    string message = string.Format(@"
                                    在執行 controller[{0}] 的 action[{1}] 時產生異常。
                                    異常類型：{2}
                                    <br>異常內容：{3}
                                    <br>引發異常的方法：{4}
                                    <br>引發異常源：{5}
                                    <br>參數：{6}"
                        , ControllerName
                        , ActionName
                    , filterContext.Exception.GetType().Name
                    , filterContext.Exception.Message
                     , filterContext.Exception.TargetSite
                     , filterContext.Exception.Source + filterContext.Exception.StackTrace
                     , sForm + sQuery
                     );
                    //記錄日誌
                    LoggerBusiness.WriteLog(message, "Web進程運行錯誤");
                }
                catch (Exception)
                {

                }

                base.OnException(filterContext);
            }
        }
//MemoryCache
https://blog.darkthread.net/blog/session-alternative
https://dotblogs.com.tw/wasichris/2015/11/14/153922
https://dotblogs.com.tw/lazycodestyle/2016/07/24/155838

//Entity Mapping
public void MapToEntity<E, V>(E entity, V viewModel) where E : class where V : class
        {
            if (entity == null) return;
            foreach (PropertyInfo property in viewModel.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
            {
                foreach (Attribute attribute in Attribute.GetCustomAttributes(property))
                {
                    if ((attribute.GetType() == typeof(ColumnAttribute)) && ((attribute as ColumnAttribute).IsMapping))
                    {
                        if (!string.IsNullOrEmpty((attribute as ColumnAttribute).MappingName))
                        {
                            if (property.PropertyType.ToString() == "System.Boolean")
                                entity.GetType().GetProperty((attribute as ColumnAttribute).MappingName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).SetValue(entity,
                                    (bool)property.GetValue(viewModel, null) ? Is.Y.ToString() : Is.N.ToString(),
                                    null);
                            else if (property.PropertyType.ToString() == "System.Int32")
                                entity.GetType().GetProperty((attribute as ColumnAttribute).MappingName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).SetValue(entity,
                                    (int)property.GetValue(viewModel, null),
                                    null);
                            else entity.GetType().GetProperty((attribute as ColumnAttribute).MappingName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).SetValue(entity,
                                    property.GetValue(viewModel, null) == null ? string.Empty : property.GetValue(viewModel, null).ToString(),
                                    null);
                        }
                    }
                }
            }
        }


public void MapFromEntity<E, V>(E entity, V viewModel) where E : class where V : class
        {
            if (entity == null) return;
            foreach (PropertyInfo property in viewModel.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
            {
                foreach (Attribute attribute in Attribute.GetCustomAttributes(property))
                {
                    if ((attribute.GetType() == typeof(ColumnAttribute)) && ((attribute as ColumnAttribute).IsMapping))
                    {
                        if (!string.IsNullOrEmpty((attribute as ColumnAttribute).MappingName))
                            SetColumnValue(viewModel, property, entity.GetType().GetProperty((attribute as ColumnAttribute).MappingName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).GetValue(entity, null));
                    }
                }
            }
        }
