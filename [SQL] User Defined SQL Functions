1.在DBContext中建立呼叫方法
public class TestContext : DbContext
  {
      private readonly IConfiguration _Config;

      public bool ReadOnlyCheck { get; set; } = false;

      public IServiceScopeFactory _IServiceScopeFactory { get; set; }

      public BfMember1Context(DbContextOptions<BfMember1Context> options, IConfiguration pConfig) : base(options)
      {
          _Config = pConfig;
      }
      
      public virtual DbSet<DAO_Bouns_Source> Bouns_Source { get; set; }

      [DbFunction(name: "fn_testUserFunction")] => 第一種方式直接掛標籤建立, 
      public string UserFunction(int Index) => throw new NotSupportedException();

      public virtual DbSet<DAO_Bouns_Source> Bouns_Source { get; set; }
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
          
      }
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
          //第二種方式, 使用modelBuilder.HasDbFunction([DBContext建立的呼叫方法資訊, MethodInfo]).HasName("DBFunctionName")
          //使用者涵式註冊, 只能透過Linq=>DBContext呼叫, 無法直接使用_BfMember1Context.GetBonusOrderID(pIndex.Index)當成一般方法呼叫, 直接呼叫不會觸發OnModelCreating, 就不會對應至DBFunction
          modelBuilder.HasDbFunction(typeof(BfMember1Context).GetMethod(nameof(UserFunction), new[] { typeof(int) })).HasName("fn_testUserFunction");
      }
2.呼叫方式, 不能直接使用 TestContext.UserFunction(1) 呼叫, 這樣的呼叫方式只會直接呼叫該方法
  而不會透過DBContext到DB對應使用者涵式, 也不會觸發OnModelCreating
  正確呼叫方式是=> _TestContext.Bouns_Source.Select(x=>_TestContext.UserFunction(1)).FirstOrDefault();
  
